from random import randint
class BoardOutException:
    def __str__(self):
        return 'Стреляете не туда!'


class BoardUsedException:
    def __str__(self):
        return 'Корабль расположен неверно, переставьте'


class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x, self.y == other.y


class Ship:
    def __init__(self, long, nose: Dot, napravlenie):
        self.long = long
        self.nose = nose
        self.napravlenie = napravlenie
        self.hp = long

    @property
    def dots(self):
        dots_list = []
        for i in range(self.long):
            if self.napravlenie == 'В':
                x = self.nose.x + i
                y = self.nose.y
            else:
                x = self.nose.x
                y = self.nose.y + i
            dots_list.append(Dot(x, y))
        return dots_list

    def shooten(self, shot):
        return shot in self.dots


class Board:
    def __init__(self):
        self.table = [['0' for _ in range(6)] for _ in range(6)]
        self.ship_types = []
        self.hid = False
        self.life_ship = 7
        self.counter_list = []

    def __str__(self):
        res = ""
        res += "   | 1 | 2 | 3 | 4 | 5 | 6 |"
        for i, row in enumerate(self.table):
            res += f"\n{i + 1}  | " + " | ".join(row) + " |"
        return res

    def add_ship(self, ship):
        try:
            for d in ship.dots:
                if self.out(d) or d in self.counter_list:
                    raise BoardUsedException
            for d in ship.dots:
                self.table[d.x][d.y] = '■'
        except ValueError:
            print('Вы ввели не целочисленное значение')
        except IndexError:
            print('Ваш корабль оказался за пределами поля, переставьте его')

    def countor(self, ship):
        conter = [(-1, -1), (-1, 0), (-1, 1),
                  (0, -1),   (0, 0),  (0, 1),
                  (1, -1),   (1, 0),  (1, 1)]
        for d in ship.dots:
            for dx, dy in conter:
                cntr = Dot(d.x + dx, d.y + dy)
                if self.hid:
                    self.table[cntr.x][cntr.y] = '.'
                self.counter_list.append(cntr)

    def out(self, d):
        if d.x or d.y > 5 or d.x or d.y < 0:
            return True
        else:
            return False

    def shot(self, d):
        if self.out(d):
            raise BoardOutException

        for ship in self.ship_types:
            if ship.shooten(d):
                ship.hp -= 1
                self.table[d.x][d.y] = 'X'

                if ship.hp == 0:
                    self.countor(ship)
                    print('Корабль уничтожен!')
                    return False
                else:
                    print('Корабль поврежден!')
                    return True

        self.table[d.x][d.y] = '*'
        print('Промазали...')
        return False


class Player:
    def __init__(self, board, board_vrag):
        self.board = board
        self.board_vrag = board_vrag

    def ask(self):
        pass

    def move(self):
        while True:
            try:
                coords = self.ask()
                target = self.board_vrag.shot(coords)
                return target
            except BoardOutException:
                print()


class AI(Player):
    def ask(self):
        d = Dot(randint(0, 5), randint(0, 5))
        return d


class User(Player):
    def ask(self):
        while True:
            coords_shot = input('Введите координаты выстрела').split()

            if len(coords_shot) != 2:
                print('Введите 2 координаты')
                continue

            x, y = coords_shot

            if not (x.isdigit()) or (y.isdigit()):
                print('Введите числа')
                continue

            x, y = int(x), int(y)

            return Dot(x - 1, y - 1)


class Game:
    def __init__(self):
        pass

    def random_board(self):
        board = Board()
        l = [3, 2, 2, 1, 1, 1, 1]
        while len(l) > 0:
            print()
            print(board)
            ship = Ship(l[0], Dot(int(input()) - 1, int(input()) - 1), input())
            board.add_ship(ship)
            board.countor(ship)
            l.pop(0)
            print(board)




g = Game()
g.random_board()



#ship = Ship(2, Dot(3, 3), 'Г')
#ship2 = Ship(1, Dot(1, 1), 'Г')
#board.add_ship(ship)
#board.counter(ship)
#board.add_ship(ship2)

#print(ship.dots)
#print(ship2.dots)
#print(board)

